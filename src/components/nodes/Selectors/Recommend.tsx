"use client";

import { Position } from "@xyflow/react";
import React from "react";
import * as z from "zod";

import { Form } from "@/components/ui/form";
import useStore from "~/app/states/store";
import { Separator } from "~/components/ui/separator";
import useBasicNodeState from "~/hooks/useBasicNodeState";

import { CardWithHeader } from "../Primitives/Card";
import Debug from "../Primitives/Debug";
import InputPrimitive from "../Primitives/Input";
import NodeHandle from "../Primitives/NodeHandle";

type PlaylistProps = {
  id: string;
  data: any;
};

const formSchema = z.object({
  seedType: z.string().default("tracks"),
  count: z.number().int().default(20),
});

const selectOptions = [
  { label: "Tracks", value: "tracks" },
  { label: "Artists", value: "artists" },
];

const Recommend: React.FC<PlaylistProps> = ({ id, data }) => {
  const {
    state,
    isValid,
    targetConnections,
    sourceConnections,
    form,
    formState,
    register,
    getNodeData,
    updateNodeData,
  } = useBasicNodeState(id, formSchema);
  const session = useStore((state) => state.session);

  React.useEffect(() => {
    if (data) {
      const parsedData = {
        seedType: data.seedType || "tracks",
        count: data.count || 27,
      };
      form!.reset(parsedData);
      form?.setValue("seedType", parsedData.seedType);
    }
  }, [data]);

  const watch = form!.watch();
  const prevWatchRef = React.useRef(watch);

  React.useEffect(() => {
    if (JSON.stringify(prevWatchRef.current) !== JSON.stringify(watch)) {
      updateNodeData(id, {
        seedType: watch.seedType,
        count: watch.count,
        playlistId: "recommended",
        name: "Recommended",
        description:
          "A list of the tracks generated by the recommendation engine.",
        image: "https://misc.scdn.co/liked-songs/liked-songs-300.png",
        total: watch.count,
        owner: session.user.name,
      });
    }
    prevWatchRef.current = watch;
  }, [watch, id, updateNodeData, session]);

  const formValid = formState!.isValid;

  const nodeValid = React.useMemo(() => {
    return formValid && isValid;
  }, [formValid, isValid]);

  return (
    <CardWithHeader
      title={`Reccomend`}
      id={id}
      type="Selector"
      status={nodeValid ? "success" : "error"}
      info="Get a list of recommended tracks based on the input."
    >
      <NodeHandle
        type="source"
        position={Position.Right}
        style={{ background: "#555" }}
      />
      <NodeHandle
        type="target"
        position={Position.Left}
        style={{ background: "#555" }}
      />
      <Form {...form!}>
        <form onSubmit={form!.handleSubmit((data) => console.info(data))}>
          <div className="flex flex-col gap-4">
            <InputPrimitive
              control={form!.control}
              name="count"
              inputType={"number"}
              label={"Count"}
              placeholder="20"
              register={register!}
              description={`Numbers of tracks to generate`}
            />
            <Separator />
            <InputPrimitive
              control={form!.control}
              name="operation"
              inputType={"select"}
              label={"SeedType"}
              placeholder={
                watch.seedType
                  ? selectOptions.find(
                      (option) => option.value === watch.seedType,
                    )!.label
                  : "Select an Seed Type"
              }
              selectOptions={selectOptions}
              register={register!}
              description={`The type of seed to use for the recommendation engine.`}
            />
            <Separator />
          </div>
        </form>
      </Form>
      <Debug
        id={id}
        isValid={nodeValid}
        TargetConnections={targetConnections}
        SourceConnections={sourceConnections}
      />
    </CardWithHeader>
  );
};

export default Recommend;
